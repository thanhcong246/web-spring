package shopbanhang.Controller.User;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.mindrot.jbcrypt.BCrypt;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import shopbanhang.Entity.Users;
import shopbanhang.Service.User.AccountServiceImpl;

@Controller
@Validated
public class UserController extends BaseController {
	@Autowired
	AccountServiceImpl accountService = new AccountServiceImpl();

	@PostMapping(value = "/dang-ky")
    public ModelAndView CreateAcc(@Valid @ModelAttribute("user") Users user, BindingResult bindingResult) {
        if (bindingResult.hasErrors()) {
            // Xử lý lỗi ở đây, ví dụ:
            ModelAndView errorModel = new ModelAndView("user/account/register");
            errorModel.addObject("status", "Đăng ký tài khoản thất bại");
            return errorModel;
        }

        // Kiểm tra xem email đã tồn tại trong cơ sở dữ liệu hay chưa
        Users existingUser = accountService.GetUserByAcc(user);
        if (existingUser != null) {
            ModelAndView errorModel = new ModelAndView("user/account/register");
            errorModel.addObject("status", "Đăng ký tài khoản thất bại - Email đã tồn tại");
            return errorModel;
        }

        // Mã hóa mật khẩu và thêm người dùng vào cơ sở dữ liệu
        user.setPassword(BCrypt.hashpw(user.getPassword(), BCrypt.gensalt(12)));
        int count = accountService.AddAccount(user);

        if (count > 0) {
            ModelAndView successModel = new ModelAndView("user/account/register");
            successModel.addObject("status", "Đăng ký tài khoản thành công");
            return successModel;
        } else {
            ModelAndView errorModel = new ModelAndView("user/account/register");
            errorModel.addObject("status", "Đăng ký tài khoản thất bại");
            return errorModel;
        }
    }
	
	@RequestMapping(value = "/dang-nhap", method = RequestMethod.GET)
	public ModelAndView Login() {
		_mvShare.setViewName("user/account/login");
		_mvShare.addObject("user", new Users());
		return _mvShare;
	}

	@RequestMapping(value = "/dang-nhap", method = RequestMethod.POST)
	public ModelAndView Login(HttpSession session, @ModelAttribute("user") Users user) {
		user = accountService.CheckAccount(user);
		if (user != null) {
			_mvShare.setViewName("redirect:/");
			session.setAttribute("LoginInfo", user);
		} else {
			_mvShare.addObject("statusLogin", "Đăng nhập thất bại");
		}
		return _mvShare;
	}

	@RequestMapping(value = "/dang-xuat", method = RequestMethod.GET)
	public String Login(HttpSession session, HttpServletRequest request) {
		session.removeAttribute("LoginInfo");
		return "redirect:" + request.getHeader("Referer");
	}


}
